package Data::Latency::Gather::Script;

use v5.16;
use Moo;
use Types::Standard qw(Bool ArrayRef Str Int);

use MooX::Options protect_argv => 0;

# VERSION: generated by DZP::OurPkgVersion

# class_type PathTiny, { class => "Path::Tiny" };
# coerce PathTiny,
#    from Str, via { "Path::Tiny"->new($_) };

use Data::Printer;
use Try::Tiny;

use Data::Latency::Gather;

option 'verbose' => (
	traits => ['Bool'],
	is     => 'ro',
	isa    => Bool,
	short   => 'v|chatty',
	documentation => qq{Make me chatty},
	long_doc => qq{Make me chatty},
);
option 'debug' => (
	traits => ['Bool'],
	is     => 'ro',
	isa    => Bool,
	hidden => 1,
	default => sub{ Data::Latency::Gather->config->{debug} },
);

has 'logger' => (
	is      => 'ro',
	isa     => sub {
	  die "$_[0] is not a Log::Dispatchouli!" unless $_[0]->isa('Log::Dispatchouli')
	},
	lazy    => 1,
	builder => '_build_logger',
);

sub _build_logger {
	my $self = shift;
	my $logger = Data::Latency::Gather->logger;
	$logger->set_debug($self->debug); # if !$logger->is_debug;
	return $logger;
} ## end sub _build_logger


sub run {
	my ($self) = @_;
	my @commands = @ARGV;    # @{ $self->extra_argv };

	$self->logger->log_debug('Running script');
	$self->logger->log_debug( np(@commands) );

# 	$self->init_script;

	foreach my $cmd (@commands) {
		next unless $cmd;
		my $cmd_sub = "cmd_${cmd}";
# 		if ( $self->can($cmd_sub) ) {
			try {
				$self->$cmd_sub;
			}
			catch {
				$self->logger->log_fatal( ["ERROR running command '%s': %s", $cmd, $_] );
			};
# 		} else {
# 			$self->logger->log_fatal("No such command ${cmd}");
# 		}
	} ## end foreach my $cmd (@commands)

	return 0;                                 # exit code for script

} ## end sub run


sub cmd_print_version {
	my $self = shift;

	my $v = $Data::Latency::Gather::VERSION || 'dev';
	$self->logger->info("\n---------------------\nVersion: $v\n---------------------");

	return;
} ## end sub cmd_print_results_data


1;



__END__

=encoding utf8

=head1 NAME

data-latency-gather.pl - Gather latency data for host(s)

=head1 VERSION

Version 0.01

=head1 SYNOPSIS

    ./bin/data-latency-gather.pl print_version

    ./bin/data-latency-gather.pl --man


=head1 DESCRIPTION

The script requires a command in order to do anything useful. Look under
FUNCTIONS for list of available commands. Don't include `cmd_` when
passing commands to the script.

=head1 FUNCTIONS - SCRIPT COMMANDS

=head2 cmd_print_version

Print app version.


=head1 AUTHOR

Charlie Garrison L<garrison@zeta.org.au>

=cut



