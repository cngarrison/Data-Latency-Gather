package Data::Latency::Gather;
    # ABSTRACT: Gather latency data for host(s)
use v5.16;
use Moo;
use MooX::ClassAttribute;
use namespace::autoclean;

use AnyEvent;
use AnyEvent::Ping::WhichIP;
use Config::Any;
use FindBin;
use Log::Dispatchouli;
use Data::Printer;
use Path::Class;
use File::Share qw(dist_dir);
use Hash::Merge::Simple qw(merge);

# VERSION: generated by DZP::OurPkgVersion

class_has 'config' => (
	is      => 'rw',
	lazy    => 1,
	builder => '_build_config',
);

sub _build_config {
	my $self           = shift;
	my $filename       = "$FindBin::Bin/../dlg.pl";
	my $filename2       = "$FindBin::Bin/dlg.pl";
	my $filename_local = "$FindBin::Bin/../dlg-local.pl";
	my $filename_local2 = "$FindBin::Bin/dlg-local.pl";
	my $config_files   = Config::Any->load_files( { files => [$filename, $filename2, $filename_local, $filename_local2], use_ext => 1, flatten_to_hash => 1 } );
# 	$self->logger->log_debug( "CONFIG_FILES:\n" . np($config_files) ); ## recursive conflict with _build_logger
	my $config = $config_files->{$filename} || {};
	$config = merge( $config, $config_files->{$filename2} )       if exists $config_files->{$filename2};
	$config = merge( $config, $config_files->{$filename_local} )  if exists $config_files->{$filename_local};
	$config = merge( $config, $config_files->{$filename_local2} ) if exists $config_files->{$filename_local2};
# 	$self->logger->log_debug( "CONFIG:\n" . np($config) ); ## recursive conflict with _build_logger
	return $config;
} ## end sub _build_config

class_has 'logger' => (
	is      => 'ro',
	isa     => sub {
	  die "$_[0] is not a Log::Dispatchouli!" unless $_[0]->isa('Log::Dispatchouli')
	},
	lazy    => 1,
	builder => '_build_logger',
);

sub _build_logger {
	my $self = shift;
	return Log::Dispatchouli->new( {
			ident     => 'DLG',
			to_stdout => 1, ##to_stderr => 1,
			debug     => Data::Latency::Gather->config->{debug},
		}
	);
} ## end sub _build_logger

sub share_dir {
	my $app_class = shift;
	my @path = @_;

	my $share_dir = dir( dist_dir( $app_class ) );
# 	log_debug { "Value of SHARE_DIR is: " . $share_dir };

	my $path_dir = dir( $share_dir, @path );
# 	log_debug { "Requested path_dir for SHARE_DIR is: " . $path_dir };
	return $path_dir if ( -d $path_dir );

	my $path_file = file( $share_dir, @path );
# 	log_debug { "Requested path_file for SHARE_DIR is: " . $path_file };
	return $path_file; # if ( -f $path_file );

} ## end sub share_dir



sub do_ping {
	my $self      = shift;
	my $host      = shift || 'www.duckduckgo.com';
	my $times     = shift || 4;
	my $package_s = shift || 56;
	my $c         = AnyEvent->condvar;

	my $ping = AnyEvent::Ping::WhichIP->new;
	my $data = [];

	$ping->ping(
		$host, $times,
		sub {
			my $results = shift;
			foreach my $result (@$results) {

				my $status = $result->[0];
				my $time   = $result->[1];
				my $ip     = $result->[2];
				push @$data, {
					status => $status,
					host   => $host,
					ip     => $ip,
					time   => $time,
				};
			} ## end foreach my $result (@$results)
			$c->send;
		  }
	);

	$c->recv;
	$ping->end;

# 	p($data);
	return $data;
} ## end sub do_ping


__PACKAGE__->meta->make_immutable;

1;
